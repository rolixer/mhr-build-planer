# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include("cmake/cmkr.cmake" OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(mhr-build-planner)

include(FetchContent)

message(STATUS "Fetching pmm...")
FetchContent_Declare(
	pmm
	SOURCE_SUBDIR
		pmm
	URL
		https://github.com/vector-of-bool/pmm/archive/refs/tags/1.5.1.tar.gz
)
FetchContent_MakeAvailable(pmm)

# Bootstrap vcpkg
include("${pmm_SOURCE_DIR}/pmm.cmake")
pmm(
	VCPKG
		REVISION
			2021.05.12
		REQUIRES
			glfw3
			GLEW
)

# Packages
find_package(glfw3 REQUIRED CONFIG)

find_package(GLEW REQUIRED CONFIG)

# Target imgui
set(CMKR_TARGET imgui)
set(imgui_SOURCES "")

list(APPEND imgui_SOURCES
	"third_party/imgui/imgui.cpp"
	"third_party/imgui/imgui_demo.cpp"
	"third_party/imgui/imgui_draw.cpp"
	"third_party/imgui/imgui_tables.cpp"
	"third_party/imgui/imgui_widgets.cpp"
	"third_party/imgui/imconfig.h"
	"third_party/imgui/imgui.h"
	"third_party/imgui/imgui_internal.h"
	"third_party/imgui/imstb_rectpack.h"
	"third_party/imgui/imstb_textedit.h"
	"third_party/imgui/imstb_truetype.h"
	"third_party/imgui/backends/imgui_impl_glfw.cpp"
	"third_party/imgui/backends/imgui_impl_glfw.h"
	"third_party/imgui/backends/imgui_impl_opengl3.cpp"
	"third_party/imgui/backends/imgui_impl_opengl3.h"
)

list(APPEND imgui_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${imgui_SOURCES})
add_library(imgui STATIC)

if(imgui_SOURCES)
	target_sources(imgui PRIVATE ${imgui_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${imgui_SOURCES})

target_compile_features(imgui PUBLIC
	cxx_std_11
)

target_include_directories(imgui PUBLIC
	"third_party/imgui"
)

target_link_libraries(imgui PUBLIC
	glfw
	GLEW::GLEW
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)
# Target mhrbp
set(CMKR_TARGET mhrbp)
set(mhrbp_SOURCES "")

list(APPEND mhrbp_SOURCES
	"lib/mhrbp.cpp"
	"lib/mhrbp.h"
)

list(APPEND mhrbp_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${mhrbp_SOURCES})
add_library(mhrbp STATIC)

if(mhrbp_SOURCES)
	target_sources(mhrbp PRIVATE ${mhrbp_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${mhrbp_SOURCES})

target_compile_features(mhrbp PUBLIC
	cxx_std_11
)

target_include_directories(mhrbp PUBLIC
	lib
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)
# Target mhr-bp-app
set(CMKR_TARGET mhr-bp-app)
set(mhr-bp-app_SOURCES "")

list(APPEND mhr-bp-app_SOURCES
	"src/main.cpp"
)

list(APPEND mhr-bp-app_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${mhr-bp-app_SOURCES})
add_executable(mhr-bp-app)

if(mhr-bp-app_SOURCES)
	target_sources(mhr-bp-app PRIVATE ${mhr-bp-app_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT mhr-bp-app)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${mhr-bp-app_SOURCES})

target_link_libraries(mhr-bp-app PRIVATE
	imgui
	mhrbp
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)
